     1                                          ;
     2                                          ; bootRogue game in 512 bytes (boot sector)
     3                                          ;
     4                                          ; by Oscar Toledo G.
     5                                          ; http://nanochess.org/
     6                                          ;
     7                                          ; (c) Copyright 2019 Oscar Toledo G.
     8                                          ;
     9                                          ; Creation date: Sep/19/2019. Generates room boxes.
    10                                          ; Revision date: Sep/20/2019. Connect rooms. Allows to navigate.
    11                                          ; Revision date: Sep/21/2019. Added ladders to go down/up. Shows
    12                                          ;                             Amulet of Yendor at level 26. Added
    13                                          ;                             circle of light.
    14                                          ; Revision date: Sep/22/2019. Creates monsters and items. Now has
    15                                          ;                             hp/exp. Food, armor, weapon, and traps
    16                                          ;                             works. Added battles. 829 bytes.
    17                                          ; Revision date: Sep/23/2019. Lots of optimization. 643 bytes.
    18                                          ; Revision date: Sep/24/2019. Again lots of optimization. 596 bytes.
    19                                          ; Revision date: Sep/25/2019. Many optimizations. 553 bytes.
    20                                          ; Revision date: Sep/26/2019. The final effort. 510 bytes.
    21                                          ;
    22                                  
    23                                          CPU 8086
    24                                  
    25                                  ROW_WIDTH:      EQU 0x00A0      ; Width in bytes of each video row
    26                                  BOX_MAX_WIDTH:  EQU 23          ; Max width of a room box
    27                                  BOX_MAX_HEIGHT: EQU 6           ; Max height of a room box
    28                                  BOX_WIDTH:      EQU 26          ; Width of box area in screen
    29                                  BOX_HEIGHT:     EQU 8           ; Height of box area in screen
    30                                  
    31                                          ; See page 45 of my book
    32                                  LIGHT_COLOR:    EQU 0x06        ; Light color (brown, dark yellow on emu)        
    33                                  HERO_COLOR:     EQU 0x0e        ; Hero color (yellow)
    34                                  
    35                                          ; See page 179 of my book
    36                                  GR_VERT:        EQU 0xba        ; Vertical line graphic
    37                                  GR_TOP_RIGHT:   EQU 0xbb        ; Top right graphic
    38                                  GR_BOT_RIGHT:   EQU 0xbc        ; Bottom right graphic
    39                                  GR_BOT_LEFT:    EQU 0xc8        ; Bottom left graphic
    40                                  GR_TOP_LEFT:    EQU 0xc9        ; Top left graphic
    41                                  GR_HORIZ:       EQU 0xcd        ; Horizontal line graphic
    42                                  
    43                                  GR_TUNNEL:      EQU 0xb1        ; Tunnel graphic (shaded block)
    44                                  GR_DOOR:        EQU 0xce        ; Door graphic (crosshair graphic)
    45                                  GR_FLOOR:       EQU 0xfa        ; Floor graphic (middle point)
    46                                  
    47                                  GR_HERO:        EQU 0x01        ; Hero graphic (smiling face)
    48                                  
    49                                  GR_LADDER:      EQU 0xf0        ; Ladder graphic 
    50                                  GR_TRAP:        EQU 0x04        ; Trap graphic (diamond)
    51                                  GR_FOOD:        EQU 0x05        ; Food graphic (clover)
    52                                  GR_ARMOR:       EQU 0x08        ; Armor graphic (square with hole in center)
    53                                  GR_YENDOR:      EQU 0x0c        ; Amulet of Yendor graphic (Female sign)
    54                                  GR_GOLD:        EQU 0x0f        ; Gold graphic (asterisk, like brightness)
    55                                  GR_WEAPON:      EQU 0x18        ; Weapon graphic (up arrow)
    56                                  
    57                                  YENDOR_LEVEL:   EQU 26          ; Level of appearance for Amulet of Yendor
    58                                  
    59                                      %ifdef com_file
    60                                          org 0x0100
    61                                      %else
    62                                          org 0x7c00
    63                                      %endif
    64                                  
    65                                          ;
    66                                          ; Sorted by order of PUSH instructions
    67                                          ;
    68                                  rnd:    equ 0x0006      ; Random seed
    69                                  hp:     equ 0x0004      ; Current HP
    70                                  level:  equ 0x0003      ; Current level (starting at 0x01)
    71                                  yendor: equ 0x0002      ; 0x01 = Not found. 0xff = Found.
    72                                  armor:  equ 0x0001      ; Armor level
    73                                  weapon: equ 0x0000      ; Weapon level
    74                                  
    75                                          ;
    76                                          ; Start of the adventure!
    77                                          ;
    78                                  start:
    79 00000000 E540                            in ax,0x40      ; Read timer counter
    80 00000002 50                              push ax         ; Setup pseudorandom number generator
    81                                  
    82 00000003 B81000                          mov ax,16
    83 00000006 50                              push ax         ; hp
    84 00000007 B001                            mov al,1
    85 00000009 50                              push ax         ; yendor (low byte) + level (high byte)
    86 0000000A 50                              push ax         ; weapon (low byte) + armor (high byte)
    87 0000000B 40                              inc ax          ; ax = 0x0002 (it was 0x0001)
    88 0000000C CD10                    	int 0x10
    89 0000000E B800B8                          mov ax,0xb800   ; Text video segment
    90 00000011 8ED8                    	mov ds,ax
    91 00000013 8EC0                            mov es,ax
    92                                  
    93 00000015 89E5                            mov bp,sp
    94                                  generate_dungeon:
    95                                          ;
    96                                          ; Advance to next level (can go deeper or higher)
    97                                          ;
    98 00000017 8A5E02                          mov bl,[bp+yendor]
    99 0000001A 005E03                          add [bp+level],bl
   100 0000001D 74FE                            je $            ; Stop if level zero is reached
   101                                  
   102                                          ;
   103                                          ; Select a maze for the dungeon
   104                                          ;
   105                                          ; There are many combinations of values that generate at least
   106                                          ; 16 mazes in order to avoid a table.
   107                                          ;
   108 0000001F 8B4606                          mov ax,[bp+rnd]        
   109 00000022 258241                          and ax,0x4182
   110 00000025 0D6D1A                          or ax,0x1a6d
   111 00000028 96                              xchg ax,si
   112                                  
   113                                          ;
   114                                          ; Clean the screen
   115                                          ;
   116 00000029 31C0                            xor ax,ax
   117 0000002B 31FF                            xor di,di
   118 0000002D B508                            mov ch,0x08
   119 0000002F F3AB                            rep stosw
   120                                  
   121                                          ;
   122                                          ; Draw the nine rooms
   123                                          ;
   124 00000031 B85601                          mov ax,(BOX_HEIGHT/2-2)*ROW_WIDTH+(BOX_WIDTH/2-2)*2
   125                                  .7:
   126 00000034 50                              push ax
   127 00000035 50                              push ax
   128 00000036 05A400                          add ax,ROW_WIDTH+4      ; Get the center of room
   129 00000039 97                              xchg ax,di                                              
   130 0000003A D1EE                            shr si,1                ; Obtain bit of right connection
   131 0000003C B8B100                          mov ax,0x0000+GR_TUNNEL
   132 0000003F B91A00                          mov cx,BOX_WIDTH
   133 00000042 7304                            jnc .3
   134 00000044 57                              push di
   135 00000045 F3AB                            rep stosw               ; Horizontal tunnel
   136 00000047 5F                              pop di
   137                                  .3:
   138 00000048 D1EE                            shr si,1                ; Obtain bit of down connection
   139 0000004A 7309                            jnc .5
   140 0000004C B108                            mov cl,BOX_HEIGHT
   141                                  .4:
   142 0000004E AA                              stosb                   ; Vertical tunnel
   143 0000004F 81C79F00                        add di,ROW_WIDTH-1
   144 00000053 E2F9                            loop .4
   145                                  .5:     
   146 00000055 B715                            mov bh,BOX_MAX_WIDTH-2  
   147 00000057 E88A01                          call random             ; Get a random width for room.
   148 0000005A 91                              xchg ax,cx
   149 0000005B B704                            mov bh,BOX_MAX_HEIGHT-2
   150 0000005D E88401                          call random             ; Get a random height for room.
   151 00000060 88C5                            mov ch,al
   152 00000062 24FE                            and al,0xfe             ; It needs a/2*2 so this does it.
   153 00000064 B450                            mov ah,ROW_WIDTH/2
   154 00000066 F6E4                            mul ah
   155 00000068 01C8                            add ax,cx               ; Now it has a centering offset
   156 0000006A 28EC                            sub ah,ch               ; Better than "mov bx,cx mov bh,0"
   157 0000006C 24FE                            and al,0xfe
   158 0000006E 5F                              pop di
   159 0000006F 29C7                            sub di,ax               ; Subtract from room center
   160 00000071 B0C9                            mov al,GR_TOP_LEFT      ; Draw top row of room
   161 00000073 BBBBCD                          mov bx,GR_HORIZ*256+GR_TOP_RIGHT
   162 00000076 E81601                  	call fill
   163                                  .9:
   164 00000079 B0BA                            mov al,GR_VERT          ; Draw intermediate row of room
   165 0000007B BBBAFA                          mov bx,GR_FLOOR*256+GR_VERT     
   166 0000007E E80E01                  	call fill
   167 00000081 FECD                            dec ch
   168 00000083 79F4                            jns .9
   169 00000085 B0C8                            mov al,GR_BOT_LEFT      ; Draw bottom row of room
   170 00000087 BBBCCD                          mov bx,GR_HORIZ*256+GR_BOT_RIGHT
   171 0000008A E80201                          call fill
   172 0000008D 58                              pop ax
   173 0000008E 83C034                          add ax,BOX_WIDTH*2
   174 00000091 3CF2                            cmp al,0xf2             ; Finished drawing three rooms?
   175 00000093 7503                            jne .6                  ; No, jump
   176                                                                  ; Yes, go to following row
   177 00000095 056404                          add ax,ROW_WIDTH*BOX_HEIGHT-BOX_WIDTH*3*2
   178                                  .6:
   179 00000098 3D000F                          cmp ax,ROW_WIDTH*BOX_HEIGHT*3
   180 0000009B 7297                            jb .7
   181                                  
   182                                          ;
   183                                          ; Put the ladder at a random corner room
   184                                          ;
   185 0000009D D16606                          shl word [bp+rnd],1
   186 000000A0 B8F801                          mov ax,3*ROW_WIDTH+12*2       
   187 000000A3 BBF80B                          mov bx,19*ROW_WIDTH+12*2        
   188 000000A6 7301                            jnc .2
   189 000000A8 93                              xchg ax,bx
   190 000000A9 7903                    .2:     jns .8
   191 000000AB 83C068                          add ax,BOX_WIDTH*2*2
   192                                  .8:
   193 000000AE 97                              xchg ax,di
   194                                  
   195 000000AF C605F0                          mov byte [di],GR_LADDER
   196                                  
   197                                          ;
   198                                          ; If a deep level has been reached then put the Amulet of Yendor
   199                                          ;
   200 000000B2 807E031A                        cmp byte [bp+level],YENDOR_LEVEL
   201 000000B6 7203                            jb .1
   202 000000B8 C6070C                          mov byte [bx],GR_YENDOR
   203                                  .1:
   204                                          ;
   205                                          ; Setup hero start
   206                                          ;
   207 000000BB BF2C07                          mov di,11*ROW_WIDTH+38*2
   208                                          ;
   209                                          ; Main game loop
   210                                          ;
   211                                  game_loop:
   212 000000BE B8[BE00]                        mov ax,game_loop        ; Force to repeat, the whole loop...
   213 000000C1 50                              push ax                 ; ...ends with ret.
   214                                  
   215                                          ;
   216                                          ; Circle of light around the player (3x3)
   217                                          ;
   218 000000C2 BB0500                          mov bx,0x0005                   ; BX values
   219 000000C5 4B                      .1:     dec bx
   220 000000C6 4B                              dec bx                          ; -1 1 3 -0x00a0
   221 000000C7 B006                            mov al,LIGHT_COLOR     
   222 000000C9 888160FF                        mov [bx+di-ROW_WIDTH],al        ; -1(1)3 
   223 000000CD 8801                            mov [bx+di],al                      
   224 000000CF 8881A000                        mov [bx+di+ROW_WIDTH],al        ; -1 1 3 +0x00a0
   225 000000D3 79F0                            jns .1
   226                                  
   227                                          ;
   228                                          ; Show our hero
   229                                          ;
   230 000000D5 FF35                            push word [di]          ; Save character under 
   231 000000D7 C705010E                        mov word [di],HERO_COLOR*256+GR_HERO
   232 000000DB 31C0                            xor ax,ax
   233 000000DD E86800                          call add_hp             ; Update stats
   234                                      ;   mov ah,0x00             ; Comes here with ah = 0
   235 000000E0 CD16                            int 0x16                ; Read keyboard
   236 000000E2 8F05                            pop word [di]           ; Restore character under 
   237                                  
   238 000000E4 88E0                            mov al,ah
   239                                  
   240 000000E6 2C4C                            sub al,0x4c
   241 000000E8 B402                            mov ah,0x02             ; Left/right multiplies by 2
   242 000000EA 3CFF                            cmp al,0xff             ; Going left (scancode 0x4b)
   243 000000EC 740E                            je .2
   244 000000EE 3C01                            cmp al,0x01             ; Going right (scancode 0x4d)
   245 000000F0 740A                            je .2
   246 000000F2 3CFC                            cmp al,0xfc             ; Going up (scancode 0x48)
   247 000000F4 7404                            je .3
   248 000000F6 3C04                            cmp al,0x04             ; Going down (scancode 0x50)
   249 000000F8 7538                            jne move_cancel
   250                                  .3:
   251 000000FA B428                            mov ah,0x28             ; Up/down multiplies by 40
   252                                  .2:
   253 000000FC F6EC                            imul ah                 ; Signed multiplication
   254                                  
   255 000000FE 93                              xchg ax,bx              ; bx = displacement offset
   256 000000FF 8A01                            mov al,[di+bx]          ; Read the target contents
   257 00000101 3CF0                            cmp al,GR_LADDER        ; GR_LADDER?
   258 00000103 742E                            je ladder_found         ; Yes, jump to next level
   259 00000105 7729                            ja move_over            ; > it must be GR_FLOOR
   260 00000107 3CCE                            cmp al,GR_DOOR          ; GR_DOOR?
   261 00000109 7425                            je move_over            ; Yes, can move
   262 0000010B 3CB1                            cmp al,GR_TUNNEL        ; GR_TUNNEL?
   263 0000010D 7421                            je move_over            ; Yes, can move
   264 0000010F 7721                            ja move_cancel          ; > it must be border, cancel movement
   265 00000111 3C04                            cmp al,GR_TRAP          ; GR_TRAP?
   266 00000113 721D                            jb move_cancel          ; < it must be blank, cancel movement
   267 00000115 8D39                            lea di,[di+bx]          ; Do move.
   268 00000117 742A                            je trap_found           ; = Yes, went over trap
   269 00000119 3C18                            cmp al,GR_WEAPON        ; GR_WEAPON?
   270 0000011B 774B                            ja battle               ; > it's a monster, go to battle
   271 0000011D C605FA                          mov byte [di],GR_FLOOR  ; Delete item from floor
   272 00000120 7418                            je weapon_found         ; = weapon found
   273 00000122 3C08                            cmp al,GR_ARMOR         ; GR_ARMOR?
   274 00000124 7410                            je armor_found          ; Yes, increase armor
   275 00000126 7216                            jb food_found           ; < it's GR_FOOD, increase hp
   276 00000128 3C0F                            cmp al,GR_GOLD          ; GR_GOLD?
   277 0000012A 7406                            je move_cancel          ; Yes, simply take it.
   278                                          ; At this point 'al' only can be GR_YENDOR
   279                                          ; Amulet of Yendor found!
   280 0000012C F65E02                          neg byte [bp+yendor]    ; Now player goes upwards over ladders.
   281 0000012F C3                              ret
   282                                  move_over:        
   283 00000130 8D39                            lea di,[bx+di]          ; Do move.
   284                                  move_cancel:
   285 00000132 C3                              ret                     ; Return to main loop.
   286                                  
   287                                          ;
   288                                          ;     I--
   289                                          ;   I--
   290                                          ; I--
   291                                          ;
   292                                  ladder_found:
   293 00000133 E9E1FE                          jmp generate_dungeon
   294                                  
   295                                          ; ______
   296                                          ; I    I
   297                                          ; I #X I
   298                                          ; I X# I
   299                                          ;  \__/
   300                                          ;   
   301                                  armor_found:
   302 00000136 FE4601                          inc byte [bp+armor]     ; Increase armor level
   303 00000139 C3                              ret
   304                                  
   305                                          ;
   306                                          ;       /| _____________
   307                                          ; (|===|oo>_____________>
   308                                          ;       \|
   309                                          ;
   310                                  weapon_found:
   311 0000013A FE4600                          inc byte [bp+weapon]    ; Increase weapon level
   312 0000013D C3                              ret
   313                                  
   314                                          ;
   315                                          ;     /--        ; ====    I
   316                                          ;     \--/
   317                                          ;
   318                                  food_found:
   319 0000013E E8A100                          call random6            ; Random 1-6
   320 00000141 EB05                            jmp add_hp
   321                                  
   322                                          ;
   323                                          ; Aaaarghhhh!
   324                                          ;
   325                                  trap_found:
   326 00000143 E89C00                          call random6            ; Random 1-6
   327 00000146 F7D8                    sub_hp: neg ax                  ; Make it negative
   328 00000148 034604                  add_hp: add ax,[bp+hp]          ; Add to current HP
   329 0000014B 78FE                            js $                    ; Stall if dead
   330 0000014D 894604                          mov [bp+hp],ax          ; Update HP.
   331                                          ;
   332                                          ; Update screen indicator
   333                                          ;
   334 00000150 BB980F                          mov bx,0x0f98           ; Point to bottom right corner
   335                                  .1:
   336 00000153 99                              cwd                     ; Extend AX into DX
   337 00000154 B90A00                          mov cx,10                                               
   338 00000157 F7F1                            div cx                  ; Divide by 10
   339 00000159 81C2300A                        add dx,0x0a30           ; Add ASCII digit zero and color to remainder
   340 0000015D 8917                            mov [bx],dx             ; Put on screen
   341 0000015F 4B                              dec bx
   342 00000160 4B                              dec bx
   343 00000161 09C0                            or ax,ax                ; More digits available?
   344 00000163 75EE                            jnz .1                  ; Yes, jump
   345 00000165 8907                            mov [bx],ax             ; Erase character just in case number shrinks
   346 00000167 C3                              ret
   347                                  
   348                                          ;
   349                                          ; Let's battle!!!
   350                                          ;
   351                                  battle:
   352 00000168 241F                            and al,0x1f     ; Separate number of monster (1-26)     
   353 0000016A 98                              cbw             ; Extend to 16 bits
   354 0000016B 88C3                            mov bl,al       ; Its attack is equivalent to its number
   355 0000016D 96                              xchg ax,si      ; Use also as its HP
   356                                          ; Player's attack
   357                                  .2:
   358 0000016E 8A7E00                          mov bh,[bp+weapon]      ; Use current weapon level as dice
   359 00000171 E87000                          call random
   360 00000174 29C6                            sub si,ax       ; Subtract from monster's HP
   361 00000176 88DF                            mov bh,bl
   362 00000178 7211                            jc .3           ; Killed? yes, jump
   363                                          ; Monster's attack
   364 0000017A E86700                          call random     ; Use monster number as dice
   365 0000017D 2A4601                          sub al,[bp+armor]       ; Subtract armor from attack                               
   366 00000180 7205                            jc .4
   367 00000182 53                              push bx
   368 00000183 E8C0FF                          call sub_hp     ; Subtract from player's HP
   369 00000186 5B                              pop bx
   370                                  .4:
   371                                      ;   mov ah,0x00     ; Comes here with ah = 0
   372 00000187 CD16                            int 0x16        ; Wait for a key.
   373 00000189 EBE3                            jmp .2          ; Another battle round.
   374                                  
   375                                          ;
   376                                          ; Monster is dead
   377                                          ;
   378                                  .3:
   379 0000018B C605FA                          mov byte [di],GR_FLOOR  ; Remove from screen
   380 0000018E C3                              ret
   381                                  
   382                                          ;
   383                                          ; Fill a row on screen for a room
   384                                          ;
   385 0000018F 51                      fill:   push cx                 ; Save CX because it needs CL value again
   386 00000190 57                              push di                 ; Save video position
   387 00000191 E81500                          call door               ; Left border
   388 00000194 88F8                    .1:     mov al,bh               ; Filler
   389 00000196 E81000                          call door
   390 00000199 FEC9                            dec cl
   391 0000019B 79F7                            jns .1
   392 0000019D 88D8                            mov al,bl               ; Right border
   393 0000019F E80700                          call door
   394 000001A2 5F                              pop di                  ; Restore video position
   395 000001A3 59                              pop cx                  ; Restore CX                                        
   396 000001A4 81C7A000                        add di,0x00a0           ; Goes to next row on screen
   397 000001A8 C3                      	ret
   398                                  
   399                                          ;
   400                                          ; Draw a room character on screen
   401                                          ;
   402                                  door:
   403 000001A9 3CFA                            cmp al,GR_FLOOR         ; Drawing floor?
   404 000001AB 7523                            jne .3                  ; No, jump
   405 000001AD 53                              push bx                 ; Here BH is equal to GR_FLOOR
   406 000001AE B780                            mov bh,0x80
   407 000001B0 E83100                          call random             ; Get a random number
   408 000001B3 3C06                            cmp al,6                ; Chance of creating a monster
   409 000001B5 730D                            jnc .11
   410 000001B7 024603                          add al,[bp+level]       ; More difficult monsters as level is deeper
   411                                  .9:
   412 000001BA 2C05                            sub al,0x05             
   413 000001BC 3C17                            cmp al,0x17             ; Make sure it fits inside ASCII letters
   414 000001BE 7DFA                            jge .9
   415 000001C0 0444                            add al,0x44             ; Offset into ASCII letters
   416 000001C2 EB0B                            jmp .12
   417                                  
   418                                  .11:
   419 000001C4 BB[F401]                        mov bx,items-5          ; Table of items
   420 000001C7 3C0A                            cmp al,10               ; Chance of creating an item
   421 000001C9 2ED7                            cs xlat
   422 000001CB 7202                            jb .12
   423 000001CD B0FA                            mov al,GR_FLOOR         ; Show only floor.
   424 000001CF 5B                      .12:    pop bx
   425                                  .3:
   426 000001D0 3CCD                            cmp al,GR_HORIZ
   427 000001D2 7404                            je .1
   428 000001D4 3CBA                            cmp al,GR_VERT
   429 000001D6 7507                            jne .2
   430 000001D8 803DB1                  .1:     cmp byte [di],GR_TUNNEL
   431 000001DB 7502                            jne .2
   432 000001DD B0CE                            mov al,GR_DOOR
   433 000001DF AA                      .2:     stosb
   434 000001E0 47                              inc di
   435 000001E1 C3                              ret
   436                                  
   437                                  random6:
   438 000001E2 B706                            mov bh,0x06
   439                                  
   440                                  random:
   441 000001E4 B8A11E                          mov ax,7841
   442 000001E7 F76606                          mul word [bp+rnd]
   443 000001EA 83C053                  	add ax,83
   444 000001ED 894606                          mov [bp+rnd],ax
   445                                   
   446                                  ;       rdtsc           ; Would make it dependent on Pentium II
   447                                  
   448                                  ;       in al,(0x40)    ; Only works for slow requirements.
   449                                  
   450 000001F0 30E4                    	xor ah,ah
   451 000001F2 F6F7                    	div bh
   452 000001F4 88E0                    	mov al,ah
   453 000001F6 98                              cbw
   454 000001F7 40                              inc ax
   455 000001F8 C3                      	ret
   456                                  
   457                                          ;
   458                                          ; Items
   459                                          ;
   460                                  items:
   461 000001F9 05                              db GR_FOOD
   462 000001FA 0F                              db GR_GOLD
   463 000001FB 04                              db GR_TRAP
   464 000001FC 18                              db GR_WEAPON
   465 000001FD 08                              db GR_ARMOR
   466                                  
   467                                      %ifdef com_file
   468                                      %else
   469                                          times 510-($-$$) db 0x4f
   470                                          db 0x55,0xaa            ; Make it a bootable sector
   471                                      %endif
   472                                  
